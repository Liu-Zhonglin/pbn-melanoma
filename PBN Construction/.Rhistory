source("~/Desktop/PBN_Melanoma_Project/Code/SAILoR_Prep.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Code/SAILoR_Prep.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Code/SAILoR_Prep.R", echo = TRUE)
View(weight_matrix)
source("~/Desktop/PBN_Melanoma_Project/Code/SAILoR_Prep.R", echo = TRUE)
View(weight_matrix)
install.packages("reshape2")
source("~/Desktop/PBN_Melanoma_Project/Code/SAILoR_Prep.R", echo = TRUE)
View(weight_matrix)
source("~/Desktop/PBN_Melanoma_Project/Code/SAILoR_Prep.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Code/SAILoR_Prep.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Code/SAILoR_Prep.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Code/SAILoR_Prep.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Code/SAILoR_Prep.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Code/generate_hybrid_pkn.R", echo = TRUE)
View(dds)
source("~/Desktop/PBN_Melanoma_Project/Code/generate_hybrid_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Code/generate_hybrid_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Code/generate_hybrid_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Code/PKN&Binarization/count_matrix.R", echo = TRUE)
# First, install BiocManager if you don't have it
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# Now, use BiocManager to install the required packages
BiocManager::install(c("STRINGdb", "DESeq2"))
source("~/Desktop/PBN_Melanoma_Project/Code/PKN&Binarization/count_matrix.R", echo = TRUE)
setwd("~/Desktop/PBN_Melanoma_Project/Code/PKN&Binarization")
source("~/Desktop/PBN_Melanoma_Project/Code/PKN&Binarization/generate_hybrid_pkn.R", echo = TRUE)
View(sif_data)
source("~/Desktop/PBN_Melanoma_Project/Code/PKN&Binarization/Binarization.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Code/PKN&Binarization/Binarization.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Code/PKN&Binarization/Binarization.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Code/PKN&Binarization/Binarization.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/generate_hybrid_pkn.R", echo = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BioNet")
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/generate_hybrid_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/generate_hybrid_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/generate_hybrid_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/generate_hybrid_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/generate_hybrid_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/Binarization.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/Binarization.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/Binarization.R", echo = TRUE)
View(vst_data)
source("~/Desktop/PBN_Melanoma_Project/Improved/PBN Construction/run_ranking_final.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PBN Construction/run_ranking_final.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PBN Construction/run_ranking_final.R", echo = TRUE)
setwd("~/Desktop/PBN_Melanoma_Project/Improved/PBN Construction")
source("~/Desktop/PBN_Melanoma_Project/Improved/PBN Construction/run_ranking_final.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PBN Construction/run_ranking_final.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Code/PKN&Binarization/generate_hybrid_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/generate_hybrid_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/generate_hybrid_pkn.R", echo = TRUE)
setwd("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization")
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/generate_hybrid_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/Binarization.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PBN Construction/run_ranking_final.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/generate_core18_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/generate_core18_pkn.R", echo = TRUE)
gc()
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/download_kegg_pkn.R", echo = TRUE)
install.packages(‘KEGGgraph’)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(c("KEGGgraph", "KEGGREST"))
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/download_kegg_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/download_kegg_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/download_kegg_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/download_kegg_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/download_kegg_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/download_kegg_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/format_kegg_download.R", echo = TRUE)
setwd("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization")
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/format_kegg_download.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/format_kegg_download.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/format_kegg_download.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/format_kegg_download.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/format_kegg_download.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/format_kegg_download.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/format_kegg_download.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/generate_data_driven_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/create_consensus_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/create_consensus_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/create_consensus_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/create_consensus_pkn.R", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
# ===================================================================
# SCRIPT: filter_common_genes.R
#
# PURPOSE:
# Takes the list of genes common to both the KEGG pathway and the
# experimental data, and performs a DESeq2 analysis on them to
# identify the subset that is significantly differentially expressed.
# ===================================================================
# --- 1. Load Required Libraries ---
library(DESeq2)
cat("--- Filtering Common Genes via DESeq2 Analysis ---\n")
# --- 2. First, re-identify the list of common genes ---
# (This ensures the starting list is correct)
cat("\nStep 1: Identifying the list of common genes...\n")
# Load KEGG gene list
tryCatch({
kegg_pkn <- read.table("kegg_melanoma_pkn.sif", sep = "\t", header = FALSE, stringsAsFactors = FALSE)
colnames(kegg_pkn) <- c("source", "interaction", "target")
kegg_gene_list <- unique(c(kegg_pkn$source, kegg_pkn$target))
}, error = function(e) {
stop("Could not load 'kegg_melanoma_pkn.sif'. Please ensure this file exists.")
})
# Load all experimental genes
count_data <- read.delim("count_matrix.txt", row.names = 1)
experimental_gene_list <- rownames(count_data)
# Find the intersection
common_genes <- intersect(kegg_gene_list, experimental_gene_list)
cat(sprintf("Found %d common genes to analyze.\n", length(common_genes)))
# --- 3. Perform DESeq2 analysis on ONLY the common genes ---
cat("\nStep 2: Performing DESeq2 analysis on the common genes...\n")
# Filter the main count matrix to keep only the common genes
filtered_counts <- count_data[rownames(count_data) %in% common_genes, ]
# Create metadata
sample_conditions <- c("sensitive", "resistant", "sensitive", "resistant", "sensitive", "resistant")
coldata <- data.frame(condition = sample_conditions)
rownames(coldata) <- colnames(filtered_counts)
# Run DESeq2
dds <- DESeqDataSetFromMatrix(countData = filtered_counts, colData = coldata, design = ~ condition)
dds <- DESeq(dds)
res <- results(dds)
# --- 4. Filter for and Display the "Important" Genes ---
cat("\nStep 3: Filtering for significantly changed common genes (padj < 0.05)...\n")
# Filter the results for statistical significance
res_significant <- subset(res, padj < 0.05)
important_common_genes <- rownames(res_significant)
# --- 5. Final Report ---
cat(sprintf("\n====== ANALYSIS COMPLETE ======\n"))
cat(sprintf("Out of %d common genes, %d were found to be significantly differentially expressed.\n", length(common_genes), length(important_common_genes)))
cat("--------------------------------------------------\n")
cat("Final List of Important Genes for the Model:\n")
print(important_common_genes)
cat("--------------------------------------------------\n")
source("~/.active-rstudio-document", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/create_consensus_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/create_consensus_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/create_consensus_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/create_consensus_pkn.R", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/.active-rstudio-document", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/Binarization.R", echo = TRUE)
setwd("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization")
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/Binarization.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/Binarization.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/create_consensus_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/Binarization.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/Binarization.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/create_consensus_pkn.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PKN&Binarization/Binarization.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PBN Construction/run_ranking_final.R", echo = TRUE)
setwd("~/Desktop/PBN_Melanoma_Project/Improved/PBN Construction")
source("~/Desktop/PBN_Melanoma_Project/Improved/PBN Construction/run_ranking_final.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PBN Construction/run_ranking_final.R", echo = TRUE)
View(time.points)
source("~/Desktop/PBN_Melanoma_Project/Improved/PBN Construction/run_ranking_final.R", echo = TRUE)
source("~/Desktop/PBN_Melanoma_Project/Improved/PBN Construction/run_ranking_final.R", echo = TRUE)
